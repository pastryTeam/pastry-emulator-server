// Generated by CoffeeScript 1.9.3
var colors, args, path, fs, bodyParser, cookieParser, CommonPackage, http, express, favicon, ip, config, port, rest, router, server;
var Cookie, rootPath, encryptor;

/* ---------------------> 模型、属性定义 开始 <--------------------- */

colors = require('colors');
config = require('../data/config');
path = require('path');
fs = require('fs');
bodyParser = require('body-parser');
cookieParser = require('cookie-parser');
CommonPackage = require('./CommonPackage');
http = require('http');
express = require('express');
favicon = require('serve-favicon');
requirejs = require('requirejs');
_ = require('underscore');
args = config.parseArgs();
rootPath = path.resolve(__dirname, '../');
encryptor = require('./encryptor');

colors.setTheme({
  silly: 'rainbow',
  input: 'grey',
  verbose: 'cyan',
  prompt: 'grey',
  info: 'green',
  data: 'grey',
  help: 'cyan',
  warn: 'yellow',
  debug: 'blue',
  error: 'red',
  thirdDebug: 'cyan',
});


/**
 * 记录客户端的随机数
 */
var cr = '';

/**
 * 保存 公钥
 */
var pubKey = fs.readFileSync(path.join(rootPath, 'data', 'keystore', 'pastry_cert.pem')) + '';

/**
 * 保存 对称密钥
 */
var desKey = '';

var agent = new http.Agent({
  maxSockets: 10
});

/**
 * nodejs服务器转发给前置服务器的 配置信息格式
 */
var options = {  
    hostname:args.server,  
    port:args.port2,  
    method:'POST',
    agent:agent,
    headers:{

    }
    // path:'/' + args.appName + '/ptframework.do?act=' // handshake
};

/**
 * 转发的路径设置
 */
var optionPath = '/' + args.appName;// handshake

/**
 * 修改协商密钥使用的参数；通过修改该对象配置 协商密钥 使用的加密方式；一般使用 4:公钥加密
 */
var handshakeOptions = {
      encryptFlag: 0,    // 0:不加密方式 1:3DES加密 2:AES加密 3:RC5加密 4:公钥加密
      hashFlag: 0,       // 0:不做Hash计算 1:采用MD5做hash计算 2:采用SHA1做hash计算
      signatureFlag: 0,  // 0:不做签名计算 1:对MD5的hash值做RSA签名 2:对SHA1的hash值做RSA签名
      key: pubKey
    };

/**
 * 修改普通请求使用的参数；通过修改该对象配置 普通请求 使用的加密方式；一般使用 1:3DES加密
 */
var normalOptions = {
      encryptFlag: 0,    // 0:不加密方式 1:3DES加密 2:AES加密 3:RC5加密 4:公钥加密
      hashFlag: 0,       // 0:不做Hash计算 1:采用MD5做hash计算 2:采用SHA1做hash计算
      signatureFlag: 0,  // 0:不做签名计算 1:对MD5的hash值做RSA签名 2:对SHA1的hash值做RSA签名
      key: desKey
    };
/* ---------------------> 模型、属性定义 结束 <--------------------- */

/* ---------------------> 方法定义 开始 <--------------------- */
/**
 * 打印显示代理服务器配置信息
 */
var printf = function(template, str) {
    var count = template.length;

    var beginStr = '*  *';
    var beginIndex = beginStr.length;

    var liubaiStr = '                        ';
    var liubaiIndex = liubaiStr.length;

    var strIndex = 0; 
    var tempLength = str.length; 
    for(i = 0; i < tempLength; i++) { 
      if ((str.charCodeAt(i) & 0xff00) != 0) { 
        strIndex ++; 
      } 
      strIndex ++; 
    }

    var endStr = '*  *';
    var endIndex = endStr.length;

    var index = count - beginIndex - liubaiIndex - strIndex  - endIndex;
    var space = '';
    for(var i = 0; i < index; i++) {
        space += ' ';
    }
    var logs = '        ' + beginStr + liubaiStr + str + space + endStr;
    console.log(logs);
}

/**
 * 解析cookie
 */
var parseCookie = function(cookie) {
    Cookie = cookie;
    cookie = cookie.toString();
    kvs = cookie.split(';');
    console.log('length = ' + kvs.length);
    for (i = 0, len = kvs.length; i < len; i++) {
      kv = kvs[i];
      if (!((sessionId = kv.split('=')) && sessionId[0] === 'JSESSIONID')) {
        continue;
      }
      sessionId = decodeURIComponent(sessionId[1]);
      break;
    }
    if (sessionId.slice(0, 2) === 's:') {
      sessionId = sessionId.split(/:|\./)[1];
    } else {
      sessionId = sessionId.split('\:')[0];
    }
    return sessionId;
};

/**
 * 获取解密密钥
 */
var getDecryptKey = function(resSecond) {
    console.log('-------------- 获取 3DES 密钥 开始 --------------> ');
    var server_number = resSecond.headers['service-number'];
    var srKey = server_number.substring(4, 12);

    var crKey = cr.substring(4, 12);
    var sessionId = parseCookie(resSecond.headers['set-cookie']);
    console.log('sessionId = ' + sessionId);
    var sidKey = sessionId.substring(sessionId.length - 9, sessionId.length - 1);

    console.log('server_number = ' + server_number);
    console.log('srKey = ' + srKey);
    console.log('cr = ' + cr);
    console.log('crKey = ' + crKey);
    console.log('sessionId = ' + sessionId);
    console.log('sidKey = ' + sidKey);
    decryptKey = srKey + crKey + sidKey;
    console.log('decryptKey = ' + decryptKey);
    console.log('-------------- 获取 3DES 密钥 结束 --------------> ');

    return decryptKey;
};


/**
 * 协商密钥请求
 */
var handshakeAction = function(req, res) {

    console.log('-------------- 转发 协商密钥请求 开始 ----------------------------------');

    console.log('-------------- 协商密钥请求 headers 开始 --------------> ');
    console.log(JSON.stringify(req.headers, null, 2).debug);
    console.log('-------------- 协商密钥请求 headers 结束 --------------> ');

    console.log('-------------- 协商密钥请求 body 开始 --------------> ');
    console.log(JSON.stringify(req.body, null, 2).debug);
    console.log('-------------- 协商密钥请求 body 结束 --------------> ');

    console.log('-------------- 协商密钥请求 保存客户端随机数 开始 --------------> ');
    cr = req.body.cr;
    console.log(JSON.stringify(cr, null, 2).debug);
    console.log('-------------- 协商密钥请求 保存客户端随机数 结束 --------------> ');
    console.log('-------------- 将明文 body 加密 开始 --------------> ');
    handshakeOptions.key = pubKey;
    var pkg = new CommonPackage(req.body, handshakeOptions);
    console.log(pkg);
    console.log('-------------- 将明文 body 加密 结束 --------------> ');

    console.log('-------------- 设置转发的服务器配置信息 开始 --------------> ');
    var optionsTemp = options;
    optionsTemp.path = optionPath + req.url;
    // optionsTemp.headers['Cookie'] = Cookie;
    optionsTemp.headers['connection'] = 'Keep-Alive';
    optionsTemp.headers['Content-Type'] = 'application/json; text/plain; charset=utf-8; application/x-www-form-urlencoded';
    optionsTemp.headers['Accept-Language'] = 'zh-cn';
    console.log(JSON.stringify(optionsTemp, null, 2).debug);
    var sendToThirdData = JSON.stringify(pkg);
    console.log('-------------- 设置转发的服务器配置信息 结束 --------------> ');
    
    var responseToClientData;
    //创建请求  
    var reqToThird = http.request(optionsTemp,function(resSecond){
        console.log('-------------- 第三方服务器成功返回 解析数据包 开始 --------------> ');
	
        console.log('-------------- 第三方服务器协商密钥返回数据包 headers 开始 --------------> ');
        console.log(JSON.stringify(resSecond.headers, null, 2).thirdDebug);
        if (resSecond.statusCode != 200) {
            var customThirdReturnPkg = {
                pkgFlag: 1,
                errCode: resSecond.statusCode,
                errMsg: '框架定义错误：第三方服务器错误，请联系第三方服务确认问题',
                dataPackage: {
                    business: '空'
                },
                ptSessionState: '4'
            };
            responseToClientData = JSON.stringify(customThirdReturnPkg);
            console.log(colors.error('状态码 = ' + resSecond.statusCode));
        } else {
            console.log(colors.thirdDebug('状态码 = ' + resSecond.statusCode));
        }
        console.log('-------------- 第三方服务器协商密钥返回数据包 headers 结束 --------------> ');
        
        desKey = getDecryptKey(resSecond);
        
        var allData = "";
        resSecond.setEncoding('utf-8'); 
        resSecond.on('data',function(data){  
            allData += data;
        });  
        resSecond.on('end',function(e){  
            console.log('-------------- 第三方服务器返回的数据包 解密 开始 --------------> ');
            console.log('解密前密文 => ')
            console.log(JSON.stringify(JSON.parse(allData), null, 2).thirdDebug);
            var business = CommonPackage.getBusiness(allData, {
              key: desKey
            });
            console.log('解密后明文 => ');
            try {
                console.log(JSON.stringify(JSON.parse(business), null, 2).thirdDebug);
            } catch(error){
                console.log(JSON.stringify(business, null, 2).thirdDebug);
            }
            var customThirdReturnPkg = {
                pkgFlag: 1,
                errCode: 0,
                errMsg: '',
                dataPackage: {
                    business: business
                },
                ptSessionState: '4'
            };
            responseToClientData = JSON.stringify(customThirdReturnPkg);
            console.log('-------------- 第三方服务器返回的数据包 解密 开始 --------------> ');
            res.end(responseToClientData);
            console.log('-------------- 转发 协商密钥请求 结束  ----------------------------------');  
        });  
        console.log('-------------- 第三方服务器成功返回 解析数据包 结束 --------------> ');
    });  
    reqToThird.on('error',function(err){  
        console.log('-------------- 第三方服务器失败返回 解析数据包 开始 --------------> ');
        responseToClientData = JSON.stringify(err);
        console.error(err);  
        console.log(JSON.stringify(err, null, 2).error);
        res.end(responseToClientData);
        console.log('-------------- 第三方服务器失败返回 解析数据包 结束 --------------> ');
    });  
    reqToThird.write(sendToThirdData);  
    reqToThird.end(); 
};

/**
 * web模式下，对明文的密码进行加密
 */
var passwordAction = function(req, res) {
    console.log('-------------- web 明文密码 加密请求 开始 ----------------------------------');

    console.log('-------------- web 明文密码 加密请求 headers 开始 --------------> ');
    console.log(JSON.stringify(req.headers, null, 2).debug);
    console.log('-------------- web 明文密码 加密请求 headers 结束 --------------> ');

    console.log('-------------- web 明文密码 加密请求 body 开始 --------------> ');
    console.log(JSON.stringify(req.body, null, 2).debug);
    console.log('-------------- web 明文密码 加密请求 body 结束 --------------> ');

    console.log('-------------- web 明文密码 加密请求 显示明文 开始 --------------> ');
    var plainPassword = req.body.password;
    console.log(plainPassword.debug);
    console.log('-------------- web 明文密码 加密请求 显示明文 结束 --------------> ');
    
    var passwordValue = '';
    for(var index = 0; index < plainPassword.length; index++) {
        var singleChar = plainPassword[index];
        passwordValue += encryptor.encrypt('des-ede3', singleChar, desKey, 'hex').toUpperCase();
    }
    console.log('-------------- web 明文密码 加密请求 显示密文 开始 --------------> ');
    var business = { 'password': passwordValue };
    console.log(JSON.stringify(business, null, 2).debug);
    console.log('-------------- web 明文密码 加密请求 显示密文 结束 --------------> ');
    var customThirdReturnPkg = {
        pkgFlag: 1,
        errCode: 0,
        errMsg: '',
        dataPackage: {
            business: JSON.stringify(business)
        },
        ptSessionState: '4'
    };
    res.end(JSON.stringify(customThirdReturnPkg));
}

/**
 * 普通通信请求
 */
var normalAction = function(req, res) {

    console.log('-------------- 转发 普通请求 开始 ----------------------------------');

    console.log('-------------- 普通请求 headers 开始 --------------> ');
    console.log(JSON.stringify(req.headers, null, 2).debug);
    console.log('-------------- 普通请求 headers 结束 --------------> ');

    console.log('-------------- 普通请求 body 开始 --------------> ');
    console.log(JSON.stringify(req.body, null, 2).debug);
    console.log('-------------- 普通请求 body 结束 --------------> ');

    // console.log('-------------- 普通请求 保存客户端随机数 开始 --------------> ');
    // cr = req.body.cr;
    // console.log('cr = ' + cr);
    // console.log('-------------- 普通请求 保存客户端随机数 结束 --------------> ');

    console.log('-------------- 将明文 body 加密 开始 --------------> ');
    normalOptions.key = desKey;
    var pkg = new CommonPackage(req.body, normalOptions);
    console.log(JSON.stringify(pkg, null, 2).debug);
    console.log('-------------- 将明文 body 加密 结束 --------------> ');

    console.log('-------------- 设置转发的服务器配置信息 开始 --------------> ');
    var optionsTemp = options;
    optionsTemp.path = optionPath + req.query.act;
    optionsTemp.headers['Cookie'] = Cookie;
    optionsTemp.headers['connection'] = 'Keep-Alive';
    optionsTemp.headers['Content-Type'] = 'application/json; text/plain; charset=utf-8; application/x-www-form-urlencoded';
    optionsTemp.headers['Accept-Language'] = 'zh-cn';
    console.log(JSON.stringify(optionsTemp, null, 2).debug);
    var sendToThirdData = JSON.stringify(pkg);
    console.log('-------------- 设置转发的服务器配置信息 结束 --------------> ');

    var responseToClientData;
    //创建请求  
    var reqToThird = http.request(optionsTemp,function(resSecond){
        console.log('-------------- 第三方服务器成功返回 解析数据包 开始 --------------> ');
        console.log('-------------- 第三方服务器普通请求返回数据包 headers 开始 --------------> ');
        console.log(JSON.stringify(resSecond.headers, null, 2).thirdDebug);
        if (resSecond.statusCode != 200) {
            var customThirdReturnPkg = {
                pkgFlag: 1,
                errCode: resSecond.statusCode,
                errMsg: '框架定义错误：第三方服务器错误，请联系第三方服务确认问题',
                dataPackage: {
                    business: '空'
                },
                ptSessionState: '4'
            };
            responseToClientData = JSON.stringify(customThirdReturnPkg);
            console.log(colors.error('状态码 = ' + resSecond.statusCode));
            console.log(resSecond);
        } else {
            console.log(colors.thirdDebug('状态码 = ' + resSecond.statusCode));
        }
        console.log('-------------- 第三方服务器普通请求返回数据包 headers 结束 --------------> ');
        
        // desKey = getDecryptKey(resSecond);
        var allData = "";
        resSecond.setEncoding('utf-8'); 
        resSecond.on('data',function(data){  
            allData += data;
        });  
        resSecond.on('end',function(e){  
            console.log('-------------- 第三方服务器返回的数据包 解密 开始 --------------> ');
            console.log('解密前密文 => ')
            console.log(JSON.stringify(JSON.parse(allData), null, 2).thirdDebug);
            var business = CommonPackage.getBusiness(allData, {
              key: desKey
            });
            console.log('解密后明文 => ');
            try{
                var testParseObj = JSON.parse(business);
                console.log(JSON.stringify(JSON.parse(business), null, 2).thirdDebug);
            } catch(e) {
                business = {'nodejs' : business};
                console.log((business + ' 不是json格式').error);
            }
            var customThirdReturnPkg = {
                pkgFlag: 1,
                errCode: 0,
                errMsg: '',
                dataPackage: {
                    business: business
                },
                ptSessionState: '4'
            };
            responseToClientData = JSON.stringify(customThirdReturnPkg);
            console.log('-------------- 第三方服务器返回的数据包 解密 结束 --------------> ');
            res.end(responseToClientData);
            console.log('-------------- 转发 普通请求 结束  ----------------------------------');  
        });  
        console.log('-------------- 第三方服务器成功返回 解析数据包 结束 --------------> ');
    });  
    reqToThird.on('error',function(err){  
        console.log('-------------- 第三方服务器失败返回 解析数据包 开始 --------------> ');
        postData = JSON.stringify(err);
        console.error(err); 
        console.log('-------------- 第三方服务器失败返回 解析数据包 结束 --------------> ');
    });  
    reqToThird.write(sendToThirdData);  
    reqToThird.end(); 
};

/**
 * 本地模拟数据
 */
var fetchMockData = function(url, param, callback) {
    var filename, i1, i2, i3, qs;
    console.log('url = ' + url);
    console.log('param = ' + param);
    i1 = url.indexOf(':');
    i2 = url.indexOf('/');
    i3 = url.indexOf('?');
    if (i3 < 0) {
      i3 = url.length;
    }
    if (i2 < 0) {
      i2 = i1 + 1;
    }
    path1 = url.substring(i2 + 1, i3);
    filename = path1;
    qs = path1;
    // url = relative(execPath, paths.wwwroot('mockdata', paths.normalize(path), filename));
    url = path.join(rootPath, 'wwwroot', 'mockdata', filename);
    console.log('file url = ' + url);

    return requirejs(['../wwwroot/mockdata/' + filename], function(mockData) {
        var data, delay, f, i, it, len, logMsg, result;
        mockData = mockData[qs];
        if (mockData) {
            result = mockData[0].result;
            data = mockData[0].data;
            delay = mockData[0].delay;
            f = false;
            logMsg = 'find mock data success';
            for (i = 0, len = mockData.length; i < len; i++) {
                it = mockData[i];
                if (!(_.isEqual(param, it.param))) {
                    continue;
                }
                data = it.result;
                data = it.data;
                delay = api.getTypeVal('Finite', it.delay, delay);
                f = true;
                break;
            }
            if (!f) {
                if (mockData[0].isDefault !== false) {
                    logMsg = 'use default mock data';
                } else {
                    data = mockData[mockData.length - 1].data;
                    delay = api.getTypeVal('Finite', mockData[mockData.length - 1].delay, delay);
                    result = api.getTypeVal('Finite', mockData[mockData.length - 1].result, 1);
                    logMsg = 'use notfound mock data';
                }
            }
        }
        if (_.isUndefined(result)) {
            result = 0;
        }
        console.log('request param:');
        console.log(JSON.stringify(param, null, '  '));
        if (_.isObject(data)) {
            data = JSON.parse(JSON.stringify(data));
        }
        console.log(logMsg);
        console.log(JSON.stringify(data, null, '  '));
        callback(result, data || {
            errMsg: '该模拟接口不存在'
        }, delay);
    });
};

/* ---------------------> 方法定义 结束 <--------------------- */

/* ---------------------> 方法调用 开始 <--------------------- */
router = express.Router();
router.use(favicon(path.join(rootPath, 'wwwroot', 'images', 'favicon.ico')));
router.use(express["static"](path.join(rootPath, 'wwwroot')));

rest = express();
rest.use(cookieParser());
server = http.createServer(rest);
rest.use(favicon(path.join(rootPath, 'wwwroot', 'images', 'favicon.ico')));
rest.use(bodyParser.raw());
rest.use(bodyParser.text());
rest.use(bodyParser.json());
rest.use(bodyParser.urlencoded({
  extended: true
}));

rest.all('*', function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Access-Control-Allow-Methods, Content-Type");
    res.header("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
    res.header("X-Powered-By", ' 3.2.1');
    res.header("Content-Type", "application/json;charset=utf-8");
    if ('OPTIONS' === req.method) {
        return res.sendStatus(200);
    } else {
        return next();
    }
});

rest.use('/', function(req, res) {

  console.log('----------------------------------------------------------------------------------> Action = ' + req.query.act + '<----------------------------------------------------------------------------------');
  
  if (args.mode == 'local') {
      console.log('------------------ 使用本地模拟数据 ------------------');
      business = JSON.stringify(req.body);
      fetchMockData(req.url, business, function(result, data, delay) {
      if (!delay) {
          delay = 1000;
      }
      return setTimeout((function() {
          // 以后按这个处理
          res.setHeader('sessionState', 100);
          var customThirdReturnPkg = {
                pkgFlag: 1,
                errCode: 0,
                errMsg: '',
                dataPackage: {
                    business: JSON.stringify(data)
                },
                ptSessionState: '4'
            };
            responseToClientData = JSON.stringify(customThirdReturnPkg);
          return res.end(responseToClientData);
        }), delay);
      });
      return;
  }

  console.log('------------------ 使用远程服务器 ------------------');
  switch (req.url) {
    case '/Handshake.do':
      handshakeAction(req, res);
      break;
    case '/Password.do':
      if (cr == '' && desKey == '') {
            // 返回一个错误码，说明通信密钥过期
            var pkg = {
                pkgFlag: 1,
                errCode: 1,
                errMsg: '会话超时，请重新协商密钥',
                dataPackage: {
                    business: '空'
                },
                ptSessionState: '3'
            }
            res.end(JSON.stringify(pkg)); //!< 握手会话超时，需要重新握手会话
            return;
      }

      passwordAction(req, res);
      break;
    default:
      if (cr == '' && desKey == '') {
          // 返回一个错误码，说明通信密钥过期
          var pkg = {
              pkgFlag: 1,
              errCode: 1,
              errMsg: '会话超时，请重新协商密钥',
              dataPackage: {
                  business: '空'
              },
              ptSessionState: '3'
          }
          res.end(JSON.stringify(pkg)); //!< 握手会话超时，需要重新握手会话
          return;
      }

      normalAction(req, res);
      break;
  }
});

rest.use(router);

server.listen(args.port1, args.addr, function() {
  
    console.log('\r\n');
    var template = '*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *';
    console.log('        ' + template);
    if (args.mode == 'local') {
      printf(template, '调试模式 : 本地模式');
      printf(template, '本机地址 : ' + args.addr);
      printf(template, '本机端口 : ' + args.port1);

    } else {
      printf(template, '调试模式 : 远程服务器模式');
      printf(template, '本机地址 : ' + args.addr);
      printf(template, '本机端口 : ' + args.port1);
      printf(template, '                        ');
      printf(template, '服务器地址 : ' + args.server);
      printf(template, '服务器端口 : ' + args.port2);
      printf(template, '跟路径地址 : ' + args.appName);
    }
    console.log('        ' + template);
    console.log('\r\n');

    console.log('服务启动成功，开始进行调试');
});
/* ---------------------> 方法调用 结束 <--------------------- */

// 配置session
// session = require('express-session');
// store = new session.MemoryStore();
// _destroy = store.destroy;
// store.destroy = function(sessionId, callback) {
//   _destroy.call(store, sessionId, callback);
//   sessionId = '';
//   console.log('session destroy ok.');
// };
// rest.use(session({
// //   store: store,
//   resave: false,
//   saveUninitialized: false,
//   secret: 'keyboard cat'
// }));